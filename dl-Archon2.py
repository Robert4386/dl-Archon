import os
import telebot
from telebot import types
import tempfile
import zipfile
import threading
from dotenv import load_dotenv
from flask import Flask, request
import time

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

bot = telebot.TeleBot(TOKEN)
user_photos = {}  # {chat_id: [photo_data1, photo_data2, ...]}

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
START_MESSAGE = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ dl-Archon Bot!*

–Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ –æ–±—ä—ë–º–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram.

üîπ *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
1. –ü–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã/—Ñ–æ—Ç–æ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
2. –Ø —Å–æ—Ö—Ä–∞–Ω—è—é –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
3. –ü–æ –∫–æ–º–∞–Ω–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º –∞—Ä—Ö–∏–≤–æ–º

üí° *–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:*
- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è KML-—Ñ–∞–π–ª–æ–≤ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–∞–ø–∫–∏ (—á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä—É—á–Ω—É—é):
- –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ OCR-—Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è KML —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Alpine Quest –∏ —Ç.–¥.

–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏, –∏ —è –∏—Ö —Å–æ—Ö—Ä–∞–Ω—é!
"""

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Render
app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    return '', 403

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    bot.reply_to(message, START_MESSAGE, parse_mode='Markdown')

@bot.message_handler(content_types=['photo'])
def handle_photos(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Ñ–æ—Ç–æ"""
    chat_id = message.chat.id
    
    if chat_id not in user_photos:
        user_photos[chat_id] = []
    
    file_info = bot.get_file(message.photo[-1].file_id)
    user_photos[chat_id].append(bot.download_file(file_info.file_path))
    
    if len(user_photos[chat_id]) == 1:
        send_download_button(chat_id)

def send_download_button(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        text=f"üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ ({len(user_photos[chat_id])} –∞—Ä—Ö–∏–≤–æ–º)",
        callback_data="download_photos"
    ))
    bot.send_message(
        chat_id,
        f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(user_photos[chat_id])} —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == 'download_photos')
def handle_download(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    chat_id = call.message.chat.id
    
    if not user_photos.get(chat_id):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ZIP-–∞—Ä—Ö–∏–≤
    with tempfile.NamedTemporaryFile(delete=False, suffix='.zip') as tmp_file:
        with zipfile.ZipFile(tmp_file.name, 'w') as zipf:
            for i, photo_data in enumerate(user_photos[chat_id], 1):
                zipf.writestr(f'coord_photo_{i}.jpg', photo_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤
        with open(tmp_file.name, 'rb') as file_to_send:
            bot.send_document(
                chat_id,
                file_to_send,
                caption=f"üì¶ –ê—Ä—Ö–∏–≤ —Å {len(user_photos[chat_id])} —Ñ–æ—Ç–æ –¥–ª—è Auto-KML"
            )
        
        # –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        user_photos[chat_id] = []
        os.unlink(tmp_file.name)
    
    bot.answer_callback_query(call.id, "‚úîÔ∏è –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    if os.getenv('RENDER'):
        # –ù–∞ Render –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook
        bot.remove_webhook()
        time.sleep(1)
        bot.set_webhook(url=f"https://{os.getenv('RENDER_SERVICE_NAME')}.onrender.com/webhook")
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
        bot.infinity_polling()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(
        target=app.run,
        kwargs={'host': '0.0.0.0', 'port': int(os.getenv('PORT', 10000))},
        daemon=True
    )
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    run_bot()